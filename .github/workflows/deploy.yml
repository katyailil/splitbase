name: Deploy UUPS to Base

on:
  workflow_dispatch:
    inputs:
      network:
        description: "Where to deploy"
        type: choice
        options: [sepolia, mainnet]
        default: sepolia
      recipients:
        description: "CSV of recipients (optional, overrides VARS)"
        required: false
      shares:
        description: "CSV of shares in permille (optional, overrides VARS)"
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install dependencies (OZ + forge-std)
        run: |
          mkdir -p lib
          forge install OpenZeppelin/openzeppelin-contracts-upgradeable@v5.0.2
          forge install OpenZeppelin/openzeppelin-contracts@v5.0.2
          forge install foundry-rs/forge-std

      - name: Set env (RPC, CHAIN_ID, RECIPIENTS, SHARES)
        shell: bash
        run: |
          if [ "${{ github.event.inputs.network }}" = "sepolia" ]; then
            echo "RPC_URL=${{ secrets.BASE_SEPOLIA_RPC_URL }}" >> $GITHUB_ENV
            echo "CHAIN_ID=84532" >> $GITHUB_ENV
          else
            echo "RPC_URL=${{ secrets.BASE_MAINNET_RPC_URL }}" >> $GITHUB_ENV
            echo "CHAIN_ID=8453" >> $GITHUB_ENV
          fi

          # RECIPIENTS fallback: input > repo VARS
          if [ -n "${{ github.event.inputs.recipients }}" ]; then
            echo "RECIPIENTS=${{ github.event.inputs.recipients }}" >> $GITHUB_ENV
          else
            echo "RECIPIENTS=${{ vars.RECIPIENTS }}" >> $GITHUB_ENV
          fi

          # SHARES fallback: input > repo VARS
          if [ -n "${{ github.event.inputs.shares }}" ]; then
            echo "SHARES=${{ github.event.inputs.shares }}" >> $GITHUB_ENV
          else
            echo "SHARES=${{ vars.SHARES }}" >> $GITHUB_ENV
          fi

      - name: Build
        run: forge build -vv

      - name: Deploy (implementation + ERC1967Proxy)
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          echo "RECIPIENTS=$RECIPIENTS"
          echo "SHARES=$SHARES"
          forge script script/DeployUUPS.s.sol:DeployUUPS \
            --rpc-url "$RPC_URL" \
            --private-key "$PRIVATE_KEY" \
            --broadcast

      # Достаём адреса из broadcast JSON
      - name: Extract addresses
        id: addrs
        run: |
          FILE="broadcast/DeployUUPS.s.sol/$CHAIN_ID/run-latest.json"
          echo "Using $FILE"
          IMPL=$(jq -r '.transactions[] | select(.contractName=="SplitBaseUpgradeable") | .contractAddress' "$FILE" | tail -n 1)
          PROXY=$(jq -r '.transactions[] | select(.contractName=="ERC1967Proxy") | .contractAddress' "$FILE" | tail -n 1)
          echo "Implementation: $IMPL"
          echo "Proxy: $PROXY"
          echo "implementation=$IMPL" >> $GITHUB_OUTPUT
          echo "proxy=$PROXY" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "### Deploy results (${{ github.event.inputs.network }})" >> $GITHUB_STEP_SUMMARY
          echo "- Implementation: \`${{ steps.addrs.outputs.implementation }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Proxy: \`${{ steps.addrs.outputs.proxy }}\`" >> $GITHUB_STEP_SUMMARY
